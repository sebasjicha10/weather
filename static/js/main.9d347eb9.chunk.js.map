{"version":3,"sources":["components/Header.js","components/Error.js","components/Form.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","className","href","prototype","PropTypes","string","isRequired","Error","message","Form","search","setSearch","setConsume","useState","error","setError","city","country","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","object","func","Weather","result","main","kelvin","parseFloat","temp","toFixed","temp_max","temp_min","App","component","consume","setResult","useEffect","a","url","fetch","api","json","cod","consumeAPI","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d347eb9.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from \"prop-types\" \n\n\nconst Header = ({title}) => {\n    return (  \n\n        <nav>\n            <div className=\"nav-wrapper light-blue darken-2\">\n                <a href=\"#!\" className=\"brand-logo\">{title}</a>\n            </div>\n        </nav>\n    )\n}\n\nHeader.prototype = {\n    title: PropTypes.string.isRequired\n}\n \nexport default Header","import React from \"react\"\nimport PropTypes from \"prop-types\" \n\n\nconst Error = ({message}) => <p className=\"red darken-4 error\">{message}</p>\n\nError.prototype = {\n    message: PropTypes.string.isRequired\n}\n \nexport default Error","import React, {useState} from \"react\"\nimport Error from \"./Error\"\nimport PropTypes from \"prop-types\" \n\n\nconst Form = ({search, setSearch, setConsume}) => {\n\n    const [error, setError] = useState(false)\n\n    // Get city & country\n    const {city, country} = search\n\n    // Update State\n    const handleChange = e => {\n        // Update state\n        setSearch({\n            ...search,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    // Form submitted\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        // Validate\n        if(city.trim() === \"\" || country.trim() === \"\") {\n            setError(true)\n            return\n        }\n        setError(false)\n\n        setConsume(true)\n    }\n\n    return ( \n        <form\n            onSubmit={handleSubmit}\n        >\n            {error ? <Error message=\"All fields are mandatory\" /> : null}\n            <div className=\"input-field col s12\">\n                <input\n                    type=\"text\"\n                    name=\"city\"\n                    id=\"city\"\n                    value={city}\n                    onChange={handleChange}\n                />\n                <label htmlFor=\"city\">City: </label>\n            </div>\n            <div className=\"input-field col s12\">\n                <select\n                    name=\"country\"\n                    id=\"country\"\n                    value={country}\n                    onChange={handleChange}\n                >\n                    <option value=\"\">-- Select a Country --</option>\n                    <option value=\"US\">Estados Unidos</option>\n                    <option value=\"MX\">México</option>\n                    <option value=\"AR\">Argentina</option>\n                    <option value=\"CO\">Colombia</option>\n                    <option value=\"CR\">Costa Rica</option>\n                    <option value=\"ES\">España</option>\n                    <option value=\"PE\">Perú</option>\n                </select>\n                <label htmlFor=\"country\">Country: </label>\n            </div>\n            \n            <div className=\"input-field col s12\">\n                <input \n                    type=\"submit\"\n                    value=\"Search Weather\"\n                    className=\"waves-effect waves-light btn-large btn-block yellow accent-4\" \n                />\n            </div>\n        </form>\n    )\n}\n\nForm.prototype = {\n    search: PropTypes.object.isRequired,\n    setSearch: PropTypes.func.isRequired,\n    setConsume: PropTypes.func.isRequired\n}\n \nexport default Form","import React from \"react\"\nimport PropTypes from \"prop-types\" \n\n\nconst Weather = ({result}) => {\n    // Extract values\n    const {name, main} = result\n\n    // Avoid loading Component before API returns data\n    if(!name) return null\n\n    // Kelvin degrees\n    const kelvin = 273.15\n\n    return (\n        <div className=\"card-panel white col s12\">\n            <div className=\"black-text\">\n                <h2>The weather of {name} is: </h2>\n                <p className=\"temperature\">\n                    {parseFloat(main.temp - kelvin, 10).toFixed(2)} <span> &#x2103;</span>\n                </p>\n                <p>Maximum Temperature:&nbsp;\n                    {parseFloat(main.temp_max - kelvin, 10).toFixed(2)} <span> &#x2103;</span>\n                </p>\n                <p>Minimum Temperature:&nbsp; \n                    {parseFloat(main.temp_min - kelvin, 10).toFixed(2)} <span> &#x2103;</span>\n                </p>\n            </div>\n        </div>\n    )\n}\n\nWeather.propTypes = {\n    result: PropTypes.object.isRequired\n}\n \nexport default Weather","import React, {Fragment, useState, useEffect} from \"react\"\nimport Header from \"./components/Header\"\nimport Form from \"./components/Form\"\nimport Weather from \"./components/Weather\"\nimport Error from \"./components/Error\"\n\n\nfunction App() {\n\n  // Form state\n  const [search, setSearch] = useState({\n    city: \"\",\n    country: \"\"\n  })\n  const [consume, setConsume] = useState(false)\n  const [result, setResult] = useState({})\n  const [error, setError] = useState(false)\n\n  const {city, country} = search\n\n  useEffect(() => {\n    const consumeAPI = async () => {\n      if(consume) {\n        const appId = \"0d3064435475c02bb9be82aaba10ce6b\"\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${appId}`\n  \n        const api = await fetch(url)\n        const result = await api.json()\n\n        setResult(result)\n        setConsume(false)\n\n        // Confirm successful response\n        if(result.cod === \"404\") {\n          setError(true)\n        } else {\n          setError(false)\n        }\n      }\n    }\n    consumeAPI()\n    // eslint-disable-next-line\n  }, [consume])\n\n  let component\n  if(error) {\n    component = <Error message=\"No results\" />\n  } else {\n    component = <Weather result={result} />\n  }\n\n  return (\n    <Fragment>\n      <Header \n        title=\"React Weather App\"\n      />\n      <div className=\"container-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n              <Form \n                search={search}\n                setSearch={setSearch}\n                setConsume={setConsume}\n              />\n            </div>\n            <div className=\"col m6 s12\">\n              {component}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}